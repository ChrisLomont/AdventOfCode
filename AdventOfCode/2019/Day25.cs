using System.Data;
using System.Threading.Channels;

namespace Lomont.AdventOfCode._2019
{
   

    internal class Day25 : AdventOfCode
    {
        public class Computer
        {
            public Queue<long> InputQueue { get; set; }
            public Dictionary<long, long> Program { get; set; }
            public List<long> OutputList { get; set; }
            public bool Paused { get; set; }
            public bool Halted { get; set; }
            public Computer(List<long> input)
            {
                InputQueue = new Queue<long>();
                Program = new Dictionary<long, long>();
                var counter = 0;
                foreach (var i in input)
                {
                    Program.Add(counter, i);
                    counter++;
                }
                OutputList = new List<long>();
            }

            public void SendInput(long input)
            {
                InputQueue.Enqueue(input);
                Paused = false;
            }
            public void Output(long output)
            {
                OutputList.Add(output);
                Paused = true;
            }

            public long Position { get; set; }
            public long RelativeBase { get; set; }

            public void Run()
            {
                while (!Halted)
                {
                    Iterate();
                }
            }

            public string RunString(string input)
            {
                OutputList.Clear();
                //foreach(var i in input)
                //{
                //	int x = i;
                //	SendInput(x);
                //}
                while (!OutputList.Any() || OutputList.Last() != 10)
                {
                    Paused = false;
                    PauseRun();
                }
                return string.Concat(OutputList.Select(x => (char)x));
            }

            public void PauseRun()
            {
                while (!Halted && !Paused)
                {
                    Iterate();
                }
            }

            public void Iterate()
            {
                long param1;
                long param2;
                var op = new OpCode(ProgramRead(Position));
               // Debug.Write($"{Position}:{op.Op}, ");
                switch (op.Op)
                {
                    case 1:
                        param1 = GetValue(op.Mode1, Position + 1);
                        param2 = GetValue(op.Mode2, Position + 2);
                        SetValue(Position + 3, op.Mode3, param1 + param2);
                        Position += 4;
                        break;
                    case 2:
                        param1 = GetValue(op.Mode1, Position + 1);
                        param2 = GetValue(op.Mode2, Position + 2);
                        SetValue(Position + 3, op.Mode3, param1 * param2);
                        Position += 4;
                        break;
                    case 3:
                        SetValue(Position + 1, op.Mode1, InputQueue.Dequeue());
                        Position += 2;
                        break;
                    case 4:
                        param1 = GetValue(op.Mode1, Position + 1);
                        Output(param1);
                        Position += 2;
                        break;
                    case 5:
                        param1 = GetValue(op.Mode1, Position + 1);
                        if (param1 != 0)
                        {
                            Position = GetValue(op.Mode2, Position + 2);
                        }
                        else
                        {
                            Position += 3;
                        }
                        break;
                    case 6:
                        param1 = GetValue(op.Mode1, Position + 1);
                        if (param1 == 0)
                        {
                            Position = GetValue(op.Mode2, Position + 2);
                        }
                        else
                        {
                            Position += 3;
                        }
                        break;
                    case 7:
                        param1 = GetValue(op.Mode1, Position + 1);
                        param2 = GetValue(op.Mode2, Position + 2);
                        if (param1 < param2)
                        {
                            SetValue(Position + 3, op.Mode3, 1);
                        }
                        else
                        {
                            SetValue(Position + 3, op.Mode3, 0);
                        }
                        Position += 4;
                        break;
                    case 8:
                        param1 = GetValue(op.Mode1, Position + 1);
                        param2 = GetValue(op.Mode2, Position + 2);
                        SetValue(Position + 3, op.Mode3, param1 == param2 ? 1 : 0);
                        Position += 4;
                        break;
                    case 9:
                        param1 = GetValue(op.Mode1, Position + 1);
                        RelativeBase += param1;
                        Position += 2;
                        break;
                    case 99:
                        Halted = true;
                        break;
                    default:
                        throw new ArgumentException($"Unrecognised opcode {op.Op} at position {Position}");

                }
            }

            private long ProgramRead(long position)
            {
                return Program.ContainsKey(position) ? Program[position] : 0;
            }

            private void ProgramWrite(long position, long value)
            {
                if (!Program.ContainsKey(position))
                {
                    Program.Add(position, value);
                    return;
                }

                Program[position] = value;
            }

            internal void SetValue(long index, int mode, long value)
            {
                if (mode == 0)
                {
                    ProgramWrite(ProgramRead(index), value);
                    return;
                }
                if (mode == 2)
                {
                    ProgramWrite(RelativeBase + ProgramRead(index), value);
                    return;
                }
                throw new ArgumentException($"Error at index {index}: mode must be 0 or 2, not {mode}");
            }

            internal long GetValue(int mode, long index)
            {
                if (mode == 0)
                {
                    return ProgramRead(ProgramRead(index));
                }
                if (mode == 1)
                {
                    return ProgramRead(index);
                }
                if (mode == 2)
                {
                    return ProgramRead(ProgramRead(index) + RelativeBase);
                }
                throw new ArgumentException($"Error at index {index}: mode must be between 0 and 2, not {mode}");
            }
        }

        public class OpCode
        {
            public int Op { get; set; }
            public int Mode1 { get; set; }
            public int Mode2 { get; set; }
            public int Mode3 { get; set; }
            public OpCode(long input)
            {
                Op = (int)input % 100;
                Mode3 = (int)input / 10000;
                if (Mode3 > 2) throw new ArgumentException($"Mode 3 is {Mode3}, should be in range 0 to 2");
                var interim = input % 10000;
                Mode2 = (int)interim / 1000;
                if (Mode2 > 2) throw new ArgumentException($"Mode 2 is {Mode3}, should be in range 0 to 2");
                interim = input % 1000;
                Mode1 = (int)interim / 100;
                if (Mode1 > 2) throw new ArgumentException($"Mode 1 is {Mode3}, should be in range 0 to 2");
            }
        }

        List<string> commands = new(){
            "","north","north","north",
            "take semiconductor",
            "east",
            //"take prime number",
            "west","west",
            //"take monolith",
            "south", "north", "east", "south", "west", "north",
            "take jam",
            "south", "east", "south", "east", "east", "west", "west", "south", "west",
            "take mutex",
            "south", "south", "south",
            //"take polygon",
            "north", "east",
            //"take weather machine",
            "west", "north", "north", "east", "south",
            "take hologram",
            "west", "east", "north", "north", "north", "west", "north", "west", "north", "inv"
        };

    public object Run2(bool part2)
        {
            var lines = ReadLines();
            var input = Numbers64(lines[0]);

            var comp = new Computer(input);
       
            RunRooms(comp, commands);

            //into the checkpoint
            //var step = "north";
            //RunRoom(comp, step);

            return -100;
        }

    class Bot
    {
        Random rand = new Random(1234);

        class Room
        {
            public string name;
            public Dictionary<string, Room?> dirs = new();
            public List<string> items = new();
            public override string ToString()
            {
                return $"{name}: ";
            }
        }

        Room lastRoom = null;
        string lastMove = "";
        List<Room> rooms = new();

        Queue<string> moves = new();
        // update, return move
        public string Update(List<string> lines)
        {
            if (moves.Any())
                return moves.Dequeue();

            //var lines = next.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                var inDoors = false;
            var inItems = false;
            string roomName = "<unknown>";
            Room r = null;
            foreach (var line in lines)
            {
                if (string.IsNullOrEmpty(line)) continue;
                var placeMatch = Regex.Match(line,@"== (?<place>[a-zA-Z ]+) ==");
                if (placeMatch.Success)
                {
                    var name = placeMatch.Groups["place"].Value;
                    r = rooms.FirstOrDefault(q => q.name == name);
                    if (r == null)
                    {
                        r = new Room{name =name};
                    }
                    continue;
                }

                var doorMatch = Regex.Match(line,@"Doors here lead");
                if (doorMatch.Success)
                {
                    inDoors = true;
                    inItems = false;
                    continue;
                }

                var itemsMatch = Regex.Match(line, @"Items here");
                if (itemsMatch.Success)
                {
                    inDoors = false;
                    inItems = true;
                    continue;
                }

                if (line.Contains("Command?"))
                    break;

                var itemMatch = Regex.Match(line, @"\- (?<item>[a-zA-Z ]+)");
                if (inItems && itemMatch.Success)
                {
                    var item = itemMatch.Groups["item"].Value.Trim();
                    if (!r.items.Contains(item))
                    {
                        r.items.Add(item);
                        moves.Enqueue("take " + item);
                    }
                    continue;
                }

                var dirMatch = Regex.Match(line,@"\- (?<dir>(north|south|east|west))");
                if (inDoors && dirMatch.Success)
                {
                    var dir = dirMatch.Groups["dir"].Value;
                    if (!r.dirs.ContainsKey(dir))
                        r.dirs.Add(dir,null);
                }
            }

            if (r != null)
                lastRoom = r;

            Console.WriteLine($"Rooms seen {rooms.Count}, items {rooms.Sum(r => r.items.Count)}");
            if (lastRoom != null)
            {
                var d = lastRoom.dirs.Select(p => p.Key).ToList();
                if (d.Any())
                    return d[rand.Next(d.Count)];
            }

            return "inv";
        }

        /* string forms:
         
            "== <name place> =="
        "Doors here lead:"
        "- north"
        "- east"..

            "Items here:
        "- weather machine"
        "Command?"
         
         */
    }


        // Define other methods and classes here
        public void RunRooms(Computer comp, List<string> commands)
        {
            var bot = new Bot();
            var rep = new[]
            {
                "s", "south",
                "n", "north",
                "e", "east",
                "w", "west",
            };

            var lines = new List<string>();
            while (true)
            {
                Console.Write("INPUT: ");
                var inp = Console.ReadLine().Trim();
                if (string.IsNullOrEmpty(inp))
                    inp = bot.Update(lines);
                lines.Clear();
                Console.WriteLine(inp);

                for (var i = 0; i < rep.Length; i += 2)
                    inp = inp == rep[i] ? rep[i+1] : inp;

                comp.InputQueue.Clear();
                inp += '\n';

                foreach (var s in inp)
                    comp.SendInput((int)s);

                var next = "";
                while (!next.Contains("Command?"))
                {
                    next = comp.RunString("");
                    lines.Add(next.Trim());
                    Console.WriteLine(next);

                    //next.Dump();
                    //str = "";
                }
            }
        }

        void Pack(List<int> input)
        {
            foreach (var c in commands)
            {
                var s = c.Trim();
                s += '\n';
                var b = Encoding.ASCII.GetBytes(s);
                input.AddRange(b.Select(cc=>(int)cc));
            }

        }

        public override object Run(bool part2)
        {
            Run2(part2);
            //return -1203;
            // a soln https://topaz.github.io/paste/#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

            // commands - each ends with \n ASCII n
            // north, south, east, west
            // take <item>
            // drop <item>
            // inv to see all

            List<int> input = new();
            //Pack(input);
            int inputIndex = 0;
            Func<int> getInput = () =>
            {
                if (inputIndex >= input.Count)
                {
                    Console.Write("Input: ");
                    var txt = Console.ReadLine();
                    txt = txt.Replace("\n", "\n").Replace("\r", "\r");
                    txt += '\n';
                    var b = Encoding.ASCII.GetBytes(txt);
                    input.AddRange(b.Select(c=>(int)c));
                }
                return input[inputIndex++];
            };

            Action<long> handleOutput = v => { Console.WriteLine("Out: "+v); };

            var lines = ReadLines();
            var prog = Numbers64(lines[0], false);
            var mem = Day02.RunIntCode(prog, 
                //getInput,
                new List<int>{(int)'\n'},
                handleOutput
            );
            return mem[0];

        }

        static string good = "0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1229:9, 1231:6, 1251:9, 1253:5, 1441:1, 1445:1, 1449:2, 1453:5, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1229:9, 1231:6, 1251:9, 1253:5, 1456:2, 1460:1, 1464:5, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1229:9, 1231:6, 1251:9, 1253:5, 1467:1, 1471:2, 1475:1, 1479:5, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1, 1226:5, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 1256:9, 1258:1, 1262:1, 1266:4, 1268:9, 1270:6, 1222:1";
        static string bad1 = "0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, 10:6, 1424:9, 1426:2, 1430:2, 1434:1, 1438:6, 1234:9, 1236:2, 1240:1, 1244:2, 1248:6, 1174:9, 1176:1, 1180:1, 1184:2, 1188:1, 1192:8, 1196:5, 1199:1, 1203:1, 1207:2, 1211:2, 1215:2, 1219:5, 0:9, 2:2, 6:2, The program '[19044] Lomont.AdventOfCode.exe' has exited with code 3221225786 (0xc000013a).\r\n";

    }
}